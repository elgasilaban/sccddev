/*
 *
 *
 *
 * (C) COPYRIGHT Talian Limited, 2011
 *
 * The source code for this program is not published or otherwise
 * divested of its trade secrets.
 *
 */
package com.talian.app.scenario;

import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;

import psdi.bo.MboRemote;
import psdi.bo.MboSetRemote;
import psdi.util.CocoException;
import psdi.util.MXSession;

import com.talian.app.fuel.ITripFuelCalc;
import com.talian.app.fuel.SimpleFuelCalc;
import com.talian.app.heli.Fleet;
import com.talian.app.route.Distance;
import com.talian.app.route.Port;
import com.talian.app.route.Route;

/**
 * @author Seno
 * Class for managing flight session scenario
 * This class is optimized for speed, so there is redundant variables
 */
public class FlightScenario {
	private String scenarioId ;
	private HashMap<String, Fleet> availableFleet ;
	private HashMap<String, Port> availablePorts ;
	private HashMap<String, Distance> distanceTable ;
	private MboRemote mbo ;
	private MXSession mxsession ;
	private Configuration config ;
	private ITripFuelCalc tripcalc ;
	private boolean isChanged ;

	public FlightScenario () {
		setScenarioId(null) ;
		availableFleet = new HashMap<String, Fleet>() ;
		availablePorts = new HashMap<String, Port>() ;
		distanceTable = new HashMap<String, Distance>() ;
		tripcalc = new SimpleFuelCalc() ;
		isChanged = false ;
	}

	private void setMbo (MboRemote mbo) {
		this.mbo = mbo ;
	}

	public Fleet[] getFleetArray () {
		if (availableFleet.isEmpty())
			return null ;

		Fleet p[] = new Fleet[availableFleet.size()] ;
		Iterator<String> it =availableFleet.keySet().iterator() ;
		for (int i=0; it.hasNext(); i++) {
			p[i] = availableFleet.get(it.next()) ;
		}

		return p ;
	}

	public Port[] getPortArray () {
		if (availablePorts.isEmpty())
			return null ;

		Port p[] = new Port[availablePorts.size()] ;
		Iterator<String> it =availablePorts.keySet().iterator() ;
		for (int i=0; it.hasNext(); i++) {
			p[i] = availablePorts.get(it.next()) ;
		}

		return p ;
	}

	public Fleet getFleet (String acreg) {
		return availableFleet.get(acreg) ;
	}

	@Override
	public String toString() {
		return this.scenarioId;
	}

	public Port getPort (String port) {
		return availablePorts.get(port) ;
	}

	public Distance getDistance (Port p1, Port p2) {
		return distanceTable.get(p1.getPort()+p2.getPort()) ;
	}

	public ITripFuelCalc getTripFuelCalculator () {
		return tripcalc ;
	}

	public Configuration getConfig () {
		return config ;
	}

	public int getCalculationBase () {
		return config.calculationBase ;
	}
	
	public Double getScore () throws RemoteException, CocoException {
		Double score = 0.0 ;
		Iterator<String> it = availableFleet.keySet().iterator() ;
		while (it.hasNext()) {
			String acreg = it.next() ;
			Fleet thefleet = availableFleet.get(acreg) ;
			Route route = thefleet.getRoute() ;
			score += route.distanceToInMinutes() ;
		}
		return score ;
	}

	public void cleanUp () throws RemoteException, CocoException {
		Iterator<String> it = availableFleet.keySet().iterator() ;
		while (it.hasNext()) {
			String acreg = it.next() ;
			Fleet thefleet = availableFleet.get(acreg) ;
			thefleet.clearAssignment() ;
		}
	}
	
	public boolean isModified () {
		return isChanged ;
	}
	
	public void setModified () {
		isChanged = true ;
	}

	public void clearModified () {
		isChanged = false ;
	}
	
	public void save () throws RemoteException, CocoException {  // save to mbo
		if (mbo == null)
			return ;
		
		isChanged = false ;

		if (mbo.isNew()) {

			mbo.getThisMboSet().save();

			MboSetRemote fleets = mbo.getMboSet("availfleets") ;
			Iterator<String> it = availableFleet.keySet().iterator() ;
			while (it.hasNext()) {
				String acreg = it.next() ;
				Fleet thefleet = availableFleet.get(acreg) ;
				MboRemote flt = fleets.add() ;
				flt.setValue ("scenarioid", getScenarioId()) ;
				thefleet.save (flt) ;
			}

			MboSetRemote ports = mbo.getMboSet("availports") ;
			it = availablePorts.keySet().iterator() ;
			while (it.hasNext()) {
				String port = it.next() ;
				Port theport = availablePorts.get(port) ;
				MboRemote prt = ports.add() ;
				prt.setValue ("scenarioid", getScenarioId()) ;
				theport.save (prt) ;
			}

			MboSetRemote configs = mbo.getMboSet("scenconfig") ;
			MboRemote cfg = configs.add() ;
			cfg.setValue ("scenarioid", getScenarioId()) ;
			config.save (cfg) ;

			MboSetRemote distance = mbo.getMboSet("scendistance") ;
			it = distanceTable.keySet().iterator() ;
			while (it.hasNext()) {
				String key = it.next() ;
				Distance thedistance = distanceTable.get(key) ;
				MboRemote dist = distance.add() ;
				thedistance.save (dist) ;
			}
		}
		else {
			// not new
			// TODO: complete this section
		}
	}
	
	static public FlightScenario readfromMBO (MboRemote mbo) throws RemoteException, CocoException {
		FlightScenario fs = new FlightScenario() ;
		fs.setMbo(mbo) ;

		fs.setScenarioId(mbo.getString("scenarioid")) ;
		MboSetRemote fleets = mbo.getMboSet("availfleets") ;

		MboRemote fleet = fleets.moveFirst() ;
		while (fleet != null) {
			Fleet flt = Fleet.readfromMBO(fs,fleet) ;
			fs.availableFleet.put(flt.getACREG(), flt) ;
			fleet = fleets.moveNext() ;
		}

		MboSetRemote ports = mbo.getMboSet("availports") ;
		MboRemote port = ports.moveFirst() ;
		while (ports != null) {
			Port prt = Port.readfromMBO(fs,port) ;
			fs.availablePorts.put(prt.getPort(), prt) ;
			port = ports.moveNext() ;
		}

		MboSetRemote configs = mbo.getMboSet("scenconfig") ;
		MboRemote cfg = configs.moveFirst() ;
		fs.config = Configuration.readfromMBO(cfg) ;

		MboSetRemote distances = mbo.getMboSet("scendistance") ;
		MboRemote distance = distances.moveFirst() ;
		while (distance != null) {
			Distance d0 = Distance.readfromMBO(fs,distance) ;
			fs.distanceTable.put(d0.getKey(), d0) ;
			distance = distances.moveNext() ;
		}

		return fs ;
	}
	
	static public FlightScenario copyScenario (FlightScenario scen) throws RemoteException, CocoException {
		MXSession session = scen.getMXSession() ;
		MboSetRemote mboset = session.getMboSet ("flightscenario") ;

		FlightScenario fs = new FlightScenario() ;
		fs.setMXSession(session) ;
 		MboRemote mbo = mboset.add() ;
		fs.setMbo(mbo) ;
		mbo.setValue("reservedate", scen.getDate()) ;
		mbo.setValue("flightsession", scen.getFlightSession()) ;

		fs.availableFleet.putAll(scen.availableFleet) ;
		fs.availablePorts.putAll(scen.availablePorts) ;
		fs.distanceTable.putAll(scen.distanceTable) ;
		fs.config = scen.getConfig().copy() ;
	
		return fs ;
	}


	static public FlightScenario newRecord (MXSession session, Date reserveDate, String flightsession) throws RemoteException, CocoException {
		MboSetRemote mboset = session.getMboSet ("flightscenario") ;

		FlightScenario fs = new FlightScenario() ;
		fs.setMXSession(session) ;

 		MboRemote mbo = mboset.add() ;
		fs.setMbo(mbo) ;
		mbo.setValue("reservedate", reserveDate) ;
		mbo.setValue("flightsession", flightsession) ;

		fs.setScenarioId(mbo.getString("scenarioid")) ;
		MboSetRemote fleets = session.getMboSet("acreg") ;
		fleets.setWhere("status = 'ACTIVE'") ;

		MboRemote fleet = fleets.moveFirst() ;
		while (fleet != null) {
			Fleet flt = Fleet.readfromMBO(fs,fleet) ;
			fs.availableFleet.put(flt.getACREG(), flt) ;
			fleet = fleets.moveNext() ;
		}

		MboSetRemote ports = session.getMboSet ("heliport") ;
		MboRemote prt = ports.moveFirst() ;
		while (prt != null) {
			Port heliport = Port.readfromMBO(fs,prt) ;
			fs.availablePorts.put(heliport.getPort(), heliport) ;
			prt  = ports.moveNext() ;
		}

		MboSetRemote configs = session.getMboSet("scenconfig") ;
		configs.setWhere("scenarioid is null") ;
		MboRemote cfg = configs.moveFirst() ;
		fs.config = Configuration.readfromMBO(cfg) ;

		MboSetRemote distances = session.getMboSet ("scendistance") ;
		MboRemote dist = distances.moveFirst() ;
		while (dist != null) {
			Distance d0 = Distance.readfromMBO(fs,dist) ;
			fs.distanceTable.put(d0.getKey(), d0) ;
			dist  = distances.moveNext() ;
		}

		return fs ;
	}


	public void setScenarioId(String scenarioId) {
		this.scenarioId = scenarioId;
	}

	public String getScenarioId() {
		return scenarioId;
	}

	public MXSession getMXSession() {
		return mxsession;
	}

	public void setMXSession (MXSession mxsession) {
		this.mxsession = mxsession ;
	}
	
	public Date getDate () {
		try {
			if (mbo != null)
				return mbo.getDate("reservedate") ;
		} catch (Exception e) {
			e.printStackTrace();
		} 
		
		return null ;
	}

	public String getFlightSession () {
		try {
			if (mbo != null)
				return mbo.getString("flightsession") ;
		} catch (Exception e) {
			e.printStackTrace();
		} 
		
		return null ;
	}

	public String[] getRefuelingPorts(Route result){
		String[] currRes = result.toPortNameArray();
		List<Port> LRefuelingPorts = new ArrayList<Port>();
		Port[] availablePort = getPortArray();
		for (int i = 0; i < availablePort.length; i++) {
			boolean isRepeated = false;
			Port port = availablePort[i];
			if (port.isRefueling()) {
				for (int j = 0; j < currRes.length; j++) {
					if (currRes[j].equals(port.getPort())) {
						isRepeated = true;
					}
				}
				if (!isRepeated) {
					LRefuelingPorts.add(port);
					isRepeated = false;
				}
			}
		}

		String[] refuelingPorts= new String[LRefuelingPorts.size()];
		for (int i=0; i < LRefuelingPorts.size(); i++) {
			refuelingPorts[i] = LRefuelingPorts.get(i).getPort();
		}
		return refuelingPorts;
	}

	public static int MAXFLEET = 64 ;
}
